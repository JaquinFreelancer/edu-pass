sequenceDiagram
    %% Comentarios:
    %% - Diagramas de secuencia principales para plataforma de cursos online y membres√≠as
    %% - Incluye flujos cr√≠ticos: autenticaci√≥n, pagos, inscripciones, progreso y certificaci√≥n
    %% - Muestra interacciones entre Frontend, API Gateway, servicios backend y externos
    %% - Considera validaciones, seguridad, Stripe y procesamiento as√≠ncrono

    participant U as Usuario
    participant F as Frontend
    participant G as API Gateway
    participant A as Auth Service
    participant P as Payment Service
    participant C as Course Service
    participant E as Enrollment Service
    participant N as Notification Service
    participant S as Stripe API
    participant DB as Database
    participant Q as Message Queue

    %% === DIAGRAMA 1: REGISTRO Y AUTENTICACI√ìN ===
    Note over U,Q: üîê Flujo de Registro y Autenticaci√≥n

    U->>F: 1. Accede a /registro
    F->>U: 2. Muestra formulario de registro
    U->>F: 3. Completa datos (email, password, nombre)
    F->>G: 4. POST /api/auth/register
    G->>A: 5. Valida y crea usuario
    A->>DB: 6. Inserta nuevo usuario (role: STUDENT)
    DB->>A: 7. Usuario creado exitosamente
    A->>N: 8. Env√≠a evento de verificaci√≥n email
    N->>Q: 9. Cola email de verificaci√≥n
    Q->>N: 10. Procesa env√≠o de email
    A->>G: 11. Respuesta de registro exitoso
    G->>F: 12. Usuario registrado
    F->>U: 13. Mensaje "Revisa tu email para verificar"

    Note over U,Q: Usuario recibe email y verifica cuenta

    U->>F: 14. Click en enlace de verificaci√≥n
    F->>G: 15. GET /api/auth/verify-email?token=xyz
    G->>A: 16. Valida token de verificaci√≥n
    A->>DB: 17. Actualiza email_verified = true
    DB->>A: 18. Email verificado
    A->>G: 19. Verificaci√≥n exitosa
    G->>F: 20. Email verificado
    F->>U: 21. Redirige a /login con mensaje de √©xito

    %% === DIAGRAMA 2: LOGIN Y OBTENCI√ìN DE TOKEN JWT ===
    Note over U,Q: üé´ Flujo de Login

    U->>F: 1. Env√≠a credenciales de login
    F->>G: 2. POST /api/auth/login
    G->>A: 3. Valida credenciales
    A->>DB: 4. Consulta usuario por email
    DB->>A: 5. Datos del usuario
    A->>A: 6. Verifica password con bcrypt
    
    alt Credenciales v√°lidas
        A->>A: 7. Genera JWT access + refresh token
        A->>DB: 8. Crea sesi√≥n de usuario
        DB->>A: 9. Sesi√≥n creada
        A->>G: 10. Tokens JWT + datos usuario
        G->>F: 11. Login exitoso
        F->>F: 12. Almacena tokens en localStorage
        F->>U: 13. Redirige a /dashboard
    else Credenciales inv√°lidas
        A->>G: 7. Error 401 Unauthorized
        G->>F: 8. Credenciales incorrectas
        F->>U: 9. Mensaje de error
    end

    %% === DIAGRAMA 3: SUSCRIPCI√ìN A PLAN DE MEMBRES√çA ===
    Note over U,Q: üí≥ Flujo de Suscripci√≥n a Membres√≠a

    U->>F: 1. Selecciona plan de membres√≠a
    F->>G: 2. GET /api/membership-plans/:id
    G->>C: 3. Obtiene detalles del plan
    C->>DB: 4. Consulta plan de membres√≠a
    DB->>C: 5. Datos del plan
    C->>G: 6. Plan encontrado
    G->>F: 7. Detalles del plan
    F->>U: 8. Muestra resumen y bot√≥n "Suscribirse"

    U->>F: 9. Confirma suscripci√≥n
    F->>G: 10. POST /api/memberships/subscribe
    G->>P: 11. Inicia proceso de suscripci√≥n
    P->>S: 12. Crea customer en Stripe
    S->>P: 13. Customer ID creado
    P->>S: 14. Crea subscription en Stripe
    S->>P: 15. Subscription + Payment Intent
    P->>G: 16. Client secret para pago
    G->>F: 17. Datos para Stripe checkout
    F->>U: 18. Redirige a Stripe Checkout

    U->>S: 19. Completa pago en Stripe
    S->>P: 20. Webhook: subscription created
    P->>P: 21. Valida webhook signature
    P->>DB: 22. Crea user_membership
    DB->>P: 23. Membres√≠a activada
    P->>N: 24. Env√≠a notificaci√≥n de bienvenida
    N->>Q: 25. Cola notificaci√≥n
    P->>S: 26. Confirma procesamiento webhook
    S->>F: 27. Redirige a success page
    F->>U: 28. Mensaje "Suscripci√≥n activada"

    %% === DIAGRAMA 4: INSCRIPCI√ìN A CURSO ===
    Note over U,Q: üìö Flujo de Inscripci√≥n a Curso

    U->>F: 1. Accede a curso espec√≠fico
    F->>G: 2. GET /api/courses/:slug
    G->>C: 3. Obtiene datos del curso
    C->>DB: 4. Consulta curso y verificar acceso
    DB->>C: 5. Datos del curso
    C->>E: 6. Verifica si usuario tiene acceso
    E->>DB: 7. Consulta membres√≠a/inscripciones
    DB->>E: 8. Estado de acceso del usuario
    
    alt Usuario tiene acceso por membres√≠a
        E->>C: 9. Acceso por membres√≠a activa
        C->>G: 10. Curso accesible
        G->>F: 11. Mostrar bot√≥n "Continuar curso"
        F->>U: 12. Acceso directo al contenido
    else Usuario debe comprar curso
        E->>C: 9. Acceso denegado - requiere compra
        C->>G: 10. Mostrar opci√≥n de compra
        G->>F: 11. Bot√≥n "Comprar curso"
        F->>U: 12. Opci√≥n de compra mostrada
        
        U->>F: 13. Inicia compra de curso
        F->>G: 14. POST /api/courses/:id/purchase
        G->>P: 15. Procesa pago de curso
        P->>S: 16. Crea Payment Intent
        S->>P: 17. Client secret
        P->>G: 18. Datos para pago
        G->>F: 19. Checkout de curso
        F->>U: 20. Formulario de pago

        U->>S: 21. Completa pago
        S->>P: 22. Webhook: payment succeeded
        P->>E: 23. Crear inscripci√≥n al curso
        E->>DB: 24. Inserta course_enrollment
        DB->>E: 25. Inscripci√≥n creada
        E->>N: 26. Notificaci√≥n de inscripci√≥n
        N->>Q: 27. Cola notificaci√≥n
        P->>F: 28. Pago exitoso
        F->>U: 29. "¬°Curso desbloqueado! Comenzar ahora"
    end

    %% === DIAGRAMA 5: SEGUIMIENTO DE PROGRESO EN LECCI√ìN ===
    Note over U,Q: üìà Flujo de Progreso en Lecci√≥n

    U->>F: 1. Accede a lecci√≥n del curso
    F->>G: 2. GET /api/lessons/:id
    G->>C: 3. Obtiene contenido de lecci√≥n
    C->>E: 4. Verifica acceso y progreso previo
    E->>DB: 5. Consulta lesson_progress
    DB->>E: 6. Progreso actual del usuario
    E->>C: 7. Usuario tiene acceso
    C->>DB: 8. Obtiene contenido de lecci√≥n
    DB->>C: 9. Contenido y recursos
    C->>G: 10. Lecci√≥n disponible
    G->>F: 11. Contenido de lecci√≥n
    F->>U: 12. Muestra video/contenido

    U->>F: 13. Reproduce video/lee contenido
    F->>F: 14. Trackea tiempo de visualizaci√≥n
    F->>G: 15. PUT /api/lessons/:id/progress (cada 30 seg)
    G->>E: 16. Actualiza progreso
    E->>DB: 17. UPDATE lesson_progress
    DB->>E: 18. Progreso actualizado
    E->>E: 19. Calcula % completado de lecci√≥n
    
    alt Lecci√≥n completada (>90% vista)
        E->>DB: 20. Marca lecci√≥n como COMPLETED
        DB->>E: 21. Lecci√≥n completada
        E->>E: 22. Recalcula progreso del curso
        E->>DB: 23. Actualiza course_enrollment progress
        DB->>E: 24. Progreso del curso actualizado
        E->>G: 25. Lecci√≥n completada
        G->>F: 26. Notificaci√≥n de completado
        F->>U: 27. "¬°Lecci√≥n completada! ‚úÖ"
        
        alt Curso completado (100%)
            E->>N: 28. Genera certificado
            N->>Q: 29. Cola generaci√≥n certificado
            Q->>E: 30. Proceso certificado
            E->>DB: 31. Inserta certificate
            DB->>E: 32. Certificado generado
            E->>N: 33. Notifica certificado disponible
            N->>Q: 34. Cola notificaci√≥n
        end
    else Progreso parcial
        E->>G: 20. Progreso actualizado
        G->>F: 21. Confirmaci√≥n
        F->>U: 22. Barra de progreso actualizada
    end

    %% === DIAGRAMA 6: REALIZACI√ìN DE QUIZ ===
    Note over U,Q: üß† Flujo de Quiz y Evaluaci√≥n

    U->>F: 1. Accede a quiz de lecci√≥n
    F->>G: 2. GET /api/quizzes/:id
    G->>C: 3. Obtiene quiz y preguntas
    C->>DB: 4. Consulta quiz y quiz_questions
    DB->>C: 5. Datos del quiz
    C->>E: 6. Verifica intentos previos
    E->>DB: 7. Consulta quiz_attempts
    DB->>E: 8. Historial de intentos
    
    alt Puede realizar quiz
        E->>C: 9. Intento permitido
        C->>G: 10. Quiz disponible
        G->>F: 11. Preguntas del quiz
        F->>U: 12. Formulario de quiz con timer

        U->>F: 13. Responde preguntas
        F->>G: 14. POST /api/quizzes/:id/submit
        G->>C: 15. Eval√∫a respuestas
        C->>C: 16. Calcula puntuaci√≥n
        C->>E: 17. Registra intento
        E->>DB: 18. Inserta quiz_attempt
        DB->>E: 19. Intento registrado
        
        alt Quiz aprobado
            E->>E: 20. Marca quiz como passed
            E->>G: 21. Quiz aprobado
            G->>F: 22. Resultados exitosos
            F->>U: 23. "¬°Quiz aprobado! üéâ Puntuaci√≥n: X/Y"
        else Quiz reprobado
            E->>G: 20. Quiz reprobado
            G->>F: 21. Resultados fallidos
            F->>U: 22. "Quiz reprobado. Puedes reintentar."
        end
    else M√°ximo intentos alcanzado
        E->>G: 9. Intentos agotados
        G->>F: 10. Error 403
        F->>U: 11. "M√°ximo de intentos alcanzado"
    end

    %% === DIAGRAMA 7: CREACI√ìN DE CURSO (INSTRUCTOR) ===
    Note over U,Q: üë®‚Äçüè´ Flujo de Creaci√≥n de Curso (Instructor)

    participant I as Instructor

    I->>F: 1. Accede a "Crear nuevo curso"
    F->>G: 2. GET /api/instructor/courses/create
    G->>A: 3. Verifica permisos de instructor
    A->>DB: 4. Valida rol INSTRUCTOR/ADMIN
    DB->>A: 5. Usuario autorizado
    A->>G: 6. Acceso permitido
    G->>F: 7. Formulario de creaci√≥n
    F->>I: 8. Muestra formulario

    I->>F: 9. Completa datos del curso
    F->>G: 10. POST /api/instructor/courses
    G->>C: 11. Crea curso en estado DRAFT
    C->>DB: 12. Inserta nuevo curso
    DB->>C: 13. Curso creado (ID generado)
    C->>G: 14. Curso creado exitosamente
    G->>F: 15. Redirecci√≥n a edici√≥n
    F->>I: 16. "Curso creado. A√±ade contenido"

    I->>F: 17. A√±ade m√≥dulos y lecciones
    F->>G: 18. POST /api/instructor/modules
    G->>C: 19. Crea m√≥dulos del curso
    C->>DB: 20. Inserta course_modules
    DB->>C: 21. M√≥dulos creados
    C->>G: 22. M√≥dulos a√±adidos
    G->>F: 23. Confirmaci√≥n
    F->>I: 24. "M√≥dulos a√±adidos exitosamente"

    I->>F: 25. Sube contenido multimedia
    F->>G: 26. POST /api/media/upload
    G->>C: 27. Procesa archivos multimedia
    C->>Q: 28. Cola procesamiento video
    Q->>C: 29. Video procesado y optimizado
    C->>DB: 30. Guarda referencias de archivos
    DB->>C: 31. Archivos guardados
    C->>G: 32. Upload completado
    G->>F: 33. Archivos disponibles
    F->>I: 34. "Contenido subido exitosamente"

    I->>F: 35. Publica curso
    F->>G: 36. PUT /api/instructor/courses/:id/publish
    G->>C: 37. Valida completitud del curso
    C->>C: 38. Verifica contenido m√≠nimo
    
    alt Curso completo y v√°lido
        C->>DB: 39. UPDATE status = 'PUBLISHED'
        DB->>C: 40. Curso publicado
        C->>N: 41. Notifica curso publicado
        N->>Q: 42. Cola notificaci√≥n
        C->>G: 43. Curso publicado exitosamente
        G->>F: 44. Confirmaci√≥n
        F->>I: 45. "¬°Curso publicado! Ya es visible"
    else Curso incompleto
        C->>G: 39. Error de validaci√≥n
        G->>F: 40. Lista de errores
        F->>I: 41. "Completa: X lecciones, Y videos"
    end